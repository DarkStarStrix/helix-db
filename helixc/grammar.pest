// Whitespace and comments
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// Main rules
source = { SOI ~ (node_def | edge_def | query_def)* ~ EOI }

node_def = { "N::" ~ identifier_upper ~ node_body }
edge_def = { "E::" ~ identifier_upper ~ edge_body }

node_body = { "{" ~ field_defs ~ "}" }
edge_body = { "{" ~ "From:" ~ identifier ~ "," ~ "To:" ~ identifier ~ "," ~ properties? ~ "}" }

field_def = { identifier_upper ~ ":" ~ type_name }
field_defs = { field_def ~ ("," ~ field_def)* }
properties = { "Properties" ~ "{" ~ field_defs? ~ "}" }




// Query definitions
param_def = { identifier /* ~ ":" ~ type_name */ }
params = { "(" ~ (param_def ~ ("," ~ param_def)*)? ~ ")" }
query_def = { "QUERY" ~ identifier ~ params? ~ "=>" ~ get_stmt }
get_stmt = { "GET" ~ traversal }

traversal = { (start_vertex | start_edge) ~ step* }

step = { colon_step | filter_step }
colon_step = { "::" ~ (vertex_step | edge_step | type_step) }
//space_step = { filter_step }

// Vertex-related steps
start_vertex = { "V" ~ ("(" ~ id_arg? ~ ")")? }
vertex_step = {
    "Out" ~ ("(" ~ edge_args? ~ ")")? |
    "In" ~ ("(" ~ edge_args? ~ ")")? |
    "Both" ~ ("(" ~ edge_args? ~ ")")? |
    "OutV" |
    "InV" |
    "BothV" 
}

// Edge-related steps
start_edge = { "E" ~ ("(" ~ id_arg? ~ ")")? }
edge_step = {
    "OutE"/*  ~ ("(" ~ vertex_args? ~ ")")? */ |
    "InE"/*  ~ ("(" ~ vertex_args? ~ ")")? */ |
    "BothE" /* ~ ("(" ~ vertex_args? ~ ")")? */
}

type_step = { identifier }
// Filter steps
filter_step = {
    has |                             // property filter
    has_id                             // id filter
}
has = { "HAS" ~ has_args }
has_id = { "HASID" ~ id_arg }



// Arguments for various steps
edge_args = { identifier_upper ~ ("," ~ identifier_upper)* }
has_args = { condition /* ~ ("AND" ~ condition)*  */}

// Basic elements
id_arg = @{ ASCII_DIGIT+ }

// Values and literals
value = { string_literal | number | boolean | null }
string_literal = ${ "\"" ~ inner_string ~ "\"" }
inner_string = @{ (!("\"" | "\\") ~ ANY)* }
boolean = { "true" | "false" }
null = { "null" }
type_name = @{ "String" | "Number" | "Boolean" }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
identifier_upper = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
number = @{ ASCII_DIGIT+ }

// Conditions
condition = { identifier ~ comparison_op ~ (value | identifier) }
comparison_op = @{ ("=" | ">" | "<" | ">=" | "<=" | "!=") }




// Main rules
source = { SOI ~ (node_def | edge_def | query_def)* ~ EOI }

// Query definitions
query_def    = { "QUERY" ~ identifier ~ query_params ~ "=>" ~ query_body ~ return_stmt }
query_params = { "(" ~ (param_def ~ ("," ~ param_def)*)? ~ ")" }
param_def    = { identifier ~ ":" ~ type_name }
query_body   = { (get_stmt | AddV | AddE | drop)* }

// Assignments and traversals
get_stmt            = { identifier ~ "<-" ~ evaluates_to_anything }
traversal           = { (start_vertex | start_edge) ~ step* ~ last_step? }
id_traversal        = { identifier ~ ((step+ ~ last_step?) | last_step) }
anonymous_traversal = { "_" ~ ((step+ ~ last_step?) | last_step) }
step                = { "::" ~ (graph_step | where_step | closure_step | object_step | exclude_field | count | ID) }
last_step           = { "::" ~ (bool_operations | update) }

// Evaluation rules for different types
evaluates_to_anything = {
    AddV
  | AddE
  | exists
  | none
  | traversal
  | id_traversal
  | string_literal
  | float
  | integer
  | boolean
  | and
  | or
  | identifier
}

evaluates_to_bool = {
    exists
  | boolean
  | and
  | or
  | identifier
  | traversal
  | id_traversal
}

evaluates_to_number = {
    float
  | integer
  | identifier
  | traversal
  | id_traversal
}

// Return statement
return_stmt = { "RETURN" ~  evaluates_to_anything ~ ("," ~ evaluates_to_anything)* }

// Vertex-related steps
start_vertex = { "V" ~ ("<" ~ type_args ~ ">")? ~ ("(" ~ id_args ~ ")")? }
graph_step   = {
    "OutE" ~ ("<" ~ type_args ~ ">")?
  | "InE" ~ ("<" ~ type_args ~ ">")?
  | "BothE" ~ ("<" ~ type_args ~ ">")?
  | "OutV" ~ ("<" ~ type_args ~ ">")?
  | "InV" ~ ("<" ~ type_args ~ ">")?
  | "BothV" ~ ("<" ~ type_args ~ ">")?
  | "Out" ~ ("<" ~ type_args ~ ">")?
  | "In" ~ ("<" ~ type_args ~ ">")?
  | "Both" ~ ("<" ~ type_args ~ ">")?
}

// Edge-related steps
start_edge = { "E" ~ ("<" ~ type_args ~ ">")? ~ ("(" ~ id_args ~ ")")? }

// Where and Exists steps
where_step = { "WHERE" ~ "(" ~ (evaluates_to_bool | anonymous_traversal) ~ ")" }
exists     = { "EXISTS" ~ "(" ~ (traversal | id_traversal | anonymous_traversal) ~ ")" }

// Arguments for various steps
type_args = { identifier_upper ~ ("," ~ identifier_upper)* }
id_arg    = { (identifier | string_literal) }
id_args   = { (id_arg) ~ ("," ~ id_arg)* }

// Range step
range_step = { "RANGE" ~ "(" ~ (evaluates_to_number) ~ "," ~ (evaluates_to_number) ~ ")" }

// Boolean operations
and             = { "AND" ~ "(" ~ (evaluates_to_bool | anonymous_traversal) ~ ("," ~ (evaluates_to_bool | anonymous_traversal))* ~ ")" }
or              = { "OR" ~ "(" ~ (evaluates_to_bool | anonymous_traversal) ~ ("," ~ (evaluates_to_bool | anonymous_traversal))* ~ ")" }
bool_operations = { GT | GTE | LT | LTE | EQ | NEQ }
GT              = { "GT" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
GTE             = { "GTE" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
LT              = { "LT" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
LTE             = { "LTE" ~ "(" ~ (evaluates_to_number | anonymous_traversal) ~ ")" }
EQ              = { "EQ" ~ "(" ~ (evaluates_to_anything | anonymous_traversal) ~ ")" }
NEQ             = { "NEQ" ~ "(" ~ (evaluates_to_anything | anonymous_traversal) ~ ")" }

count        = { "COUNT" }
none         = { "NONE" }
ID           = { "ID" }
update_field = { identifier ~ ":" ~ (evaluates_to_anything | anonymous_traversal) }
update       = { "UPDATE" ~ "(" ~ "{" ~ update_field ~ ("," ~ update_field)* ~ "}" ~ ")" }

object_step   = { "{" ~ mapping_field ~ ("," ~ mapping_field)* ~ ("," ~ spread_object)? ~ "}" }
exclude_field = { "!" ~ "{" ~ identifier ~ ("," ~ identifier)* ~ ("," ~ spread_object)? ~ "}" }
closure_step  = { "|" ~ identifier ~ "|" ~ object_step }
spread_object = { ".." }

mapping_field = { (identifier ~ (":" ~ (anonymous_traversal | evaluates_to_anything | object_step ))) | identifier }

// Schema definitions
node_def   = { "V::" ~ identifier_upper ~ node_body }
edge_def   = { "E::" ~ identifier_upper ~ edge_body }
node_body  = { "{" ~ field_defs ~ "}" }
edge_body  = { "{" ~ "From:" ~ identifier_upper ~ "," ~ "To:" ~ identifier_upper ~ "," ~ properties ~ "}" }
field_def  = { (identifier_upper ~ ":" ~ type_name) }
field_defs = { field_def ~ ("," ~ field_def)* }
properties = { "Properties" ~ ":" ~ "{" ~ field_defs? ~ "}" }

// Values and literals
string_literal   = ${ "\"" ~ inner_string ~ "\"" }
inner_string     = @{ (!("\"" | "\\") ~ ANY)* }
boolean          =  { "true" | "false" }
type_name        = @{ "String" | "Integer" | "Float" | "Boolean" }
identifier       = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
identifier_upper = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }
integer          = @{ ASCII_DIGIT+ }
float            = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

// Whitespace and comments
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }

// Add edged and vertices
create_field = { "{" ~ new_field ~ ("," ~ new_field)* ~ "}" }
new_field    = { identifier ~ ":" ~ (anonymous_traversal | evaluates_to_anything | create_field) }
AddV         = { "AddV" ~ ("<" ~ identifier_upper ~ ">")? ~ ("(" ~ create_field? ~ ")")? }
AddE         = { "AddE" ~ ("<" ~ identifier_upper ~ ">")? ~ ("(" ~ create_field? ~ ")")? ~ (from_to | to_from) }
from_to      = { "::" ~ "From" ~ ("(" ~ id_arg ~ ")") ~ "::" ~ "To" ~ "(" ~ id_arg ~ ")" }
to_from      = { "::" ~ "To" ~ "(" ~ id_arg ~ ")" ~ "::" ~ "From" ~ "(" ~ id_arg ~ ")" }
drop         = { "DROP" ~ (traversal | id_traversal | identifier)? }
